// Code generated by go-swagger; DO NOT EDIT.

package credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RevokeCredentialHandlerFunc turns a function with the right signature into a revoke credential handler
type RevokeCredentialHandlerFunc func(RevokeCredentialParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RevokeCredentialHandlerFunc) Handle(params RevokeCredentialParams) middleware.Responder {
	return fn(params)
}

// RevokeCredentialHandler interface for that can handle valid revoke credential params
type RevokeCredentialHandler interface {
	Handle(RevokeCredentialParams) middleware.Responder
}

// NewRevokeCredential creates a new http.Handler for the revoke credential operation
func NewRevokeCredential(ctx *middleware.Context, handler RevokeCredentialHandler) *RevokeCredential {
	return &RevokeCredential{Context: ctx, Handler: handler}
}

/*RevokeCredential swagger:route DELETE /credential/{credentialId} credential revokeCredential

Revoke a credential

This service revokes a credential in the credential revocation list(Blockchain) providing a credential Id

*/
type RevokeCredential struct {
	Context *middleware.Context
	Handler RevokeCredentialHandler
}

func (o *RevokeCredential) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRevokeCredentialParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
