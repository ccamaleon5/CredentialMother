// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialSubject credential subject
// swagger:model CredentialSubject
type CredentialSubject struct {

	// The claims that will be generated with the credential
	Content interface{} `json:"content,omitempty"`

	// The evidence obtained from the validation of the claims, may be photos, physical documents, links, etc
	Evidence interface{} `json:"evidence,omitempty"`

	// credential expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// credential issuance date
	// Format: date-time
	IssuanceDate strfmt.DateTime `json:"issuanceDate,omitempty"`

	// Credential Type
	Type string `json:"type,omitempty"`
}

// Validate validates this credential subject
func (m *CredentialSubject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuanceDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialSubject) validateExpirationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CredentialSubject) validateIssuanceDate(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuanceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("issuanceDate", "body", "date-time", m.IssuanceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialSubject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialSubject) UnmarshalBinary(b []byte) error {
	var res CredentialSubject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
