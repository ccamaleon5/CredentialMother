// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Proof proof
// swagger:model Proof
type Proof struct {

	// The date of the digital signature with format YYYY-MM-DDTHH:MM:SSZ
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// the digital signature of credential provider
	SignatureValue string `json:"signatureValue,omitempty"`

	// Sign Algorithm
	// Enum: [SmartContract RSASignature Secp256k1 Secp256r1]
	Type string `json:"type,omitempty"`

	// The method to proof if a credential is valid. The methods can include smart contracts, public keys
	VerificationMethod string `json:"verificationMethod,omitempty"`
}

// Validate validates this proof
func (m *Proof) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Proof) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var proofTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SmartContract","RSASignature","Secp256k1","Secp256r1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proofTypeTypePropEnum = append(proofTypeTypePropEnum, v)
	}
}

const (

	// ProofTypeSmartContract captures enum value "SmartContract"
	ProofTypeSmartContract string = "SmartContract"

	// ProofTypeRSASignature captures enum value "RSASignature"
	ProofTypeRSASignature string = "RSASignature"

	// ProofTypeSecp256k1 captures enum value "Secp256k1"
	ProofTypeSecp256k1 string = "Secp256k1"

	// ProofTypeSecp256r1 captures enum value "Secp256r1"
	ProofTypeSecp256r1 string = "Secp256r1"
)

// prop value enum
func (m *Proof) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, proofTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Proof) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Proof) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Proof) UnmarshalBinary(b []byte) error {
	var res Proof
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
